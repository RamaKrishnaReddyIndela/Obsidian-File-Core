import React, { useState } from 'react';
import axios from '../../utils/axios';
import toast from 'react-hot-toast';
import { Shield, AlertTriangle, CheckCircle, FileX, Upload, Scan } from 'lucide-react';
import { useI18n } from '../../i18n';
import { useTheme } from '../../contexts/ThemeContext';

const MalwareScanner = () => {
  const { t } = useI18n();
  const { isDark } = useTheme();
  const [file, setFile] = useState(null);
  const [scanning, setScanning] = useState(false);
  const [results, setResults] = useState(null);
  const [dragActive, setDragActive] = useState(false);

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setFile(e.dataTransfer.files[0]);
    }
  };

  const handleFileSelect = (e) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0]);
    }
  };

  const scanForMalware = async () => {
    if (!file) {
      toast.error('Please select a file to scan');
      return;
    }

    setScanning(true);
    setResults(null);

    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await axios.post('/ml/scan/malware', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (response.data.success) {
        setResults(response.data.result);
        toast.success('🛡️ Malware scan completed!');
      } else {
        toast.error('Scan failed: ' + (response.data.error || 'Unknown error'));
      }
    } catch (error) {
      console.error('Malware scan error:', error);
      toast.error('❌ Malware scan failed: ' + (error.response?.data?.error || error.message));
    } finally {
      setScanning(false);
    }
  };

  const getThreatLevel = (verdict) => {
    switch (verdict?.toLowerCase()) {
      case 'malicious':
        return { color: 'text-red-600 bg-red-50', icon: AlertTriangle, label: 'MALICIOUS' };
      case 'suspicious':
        return { color: 'text-yellow-600 bg-yellow-50', icon: AlertTriangle, label: 'SUSPICIOUS' };
      case 'clean':
        return { color: 'text-green-600 bg-green-50', icon: CheckCircle, label: 'CLEAN' };
      default:
        return { color: 'text-gray-600 bg-gray-50', icon: FileX, label: 'UNKNOWN' };
    }
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const threat = results ? getThreatLevel(results.verdict) : null;

  return (
    <div className={`min-h-screen p-6 transition-colors ${
      isDark 
        ? 'bg-gradient-to-br from-blue-900 to-indigo-900' 
        : 'bg-gradient-to-br from-blue-50 to-indigo-100'
    }`}>
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex justify-center items-center gap-3 mb-4">
            <Shield className={`w-10 h-10 ${
              isDark ? 'text-red-400' : 'text-red-600'
            }`} />
            <h1 className={`text-3xl font-bold ${
              isDark ? 'text-white' : 'text-gray-800'
            }`}>{t('dashboard.tools.maliciousFinder')}</h1>
          </div>
          <p className={isDark ? 'text-gray-300' : 'text-gray-600'}>
            Advanced threat detection using machine learning algorithms to identify malicious files
          </p>
        </div>

        {/* File Upload Section */}
        <div className={`rounded-2xl shadow-xl p-6 mb-6 transition-colors ${
          isDark ? 'bg-gray-800' : 'bg-white'
        }`}>
          <h2 className={`text-xl font-semibold mb-4 flex items-center gap-2 ${
            isDark ? 'text-white' : 'text-gray-800'
          }`}>
            <Upload className="w-5 h-5" />
            Upload File for Analysis
          </h2>

          <div
            className={`relative border-2 border-dashed rounded-xl p-8 text-center transition-colors ${
              dragActive
                ? isDark 
                  ? 'border-blue-400 bg-blue-900/30'
                  : 'border-blue-500 bg-blue-50'
                : file
                ? isDark 
                  ? 'border-green-400 bg-green-900/30'
                  : 'border-green-500 bg-green-50'
                : isDark 
                  ? 'border-gray-600 hover:border-gray-500'
                  : 'border-gray-300 hover:border-gray-400'
            }`}
            onDragEnter={handleDrag}
            onDragLeave={handleDrag}
            onDragOver={handleDrag}
            onDrop={handleDrop}
          >
            <input
              type="file"
              onChange={handleFileSelect}
              className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
              accept="*/*"
            />
            
            {file ? (
              <div className="space-y-2">
                <CheckCircle className={`w-12 h-12 mx-auto ${
                  isDark ? 'text-green-400' : 'text-green-500'
                }`} />
                <p className={`text-lg font-medium ${
                  isDark ? 'text-green-300' : 'text-green-700'
                }`}>{file.name}</p>
                <p className={`text-sm ${
                  isDark ? 'text-green-400' : 'text-green-600'
                }`}>
                  Size: {formatFileSize(file.size)} • Type: {file.type || 'Unknown'}
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                <Upload className={`w-16 h-16 mx-auto ${
                  isDark ? 'text-gray-500' : 'text-gray-400'
                }`} />
                <div>
                  <p className={`text-lg font-medium ${
                    isDark ? 'text-gray-300' : 'text-gray-700'
                  }`}>
                    Drop your file here or click to browse
                  </p>
                  <p className={`text-sm ${
                    isDark ? 'text-gray-400' : 'text-gray-500'
                  }`}>
                    Supports all file types • Max size: 50MB
                  </p>
                </div>
              </div>
            )}
          </div>

          {/* Scan Button */}
          <div className="flex justify-center mt-6">
            <button
              onClick={scanForMalware}
              disabled={!file || scanning}
              className={`px-8 py-3 rounded-xl font-semibold text-white transition-all flex items-center gap-2 ${
                !file || scanning
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-red-600 hover:bg-red-700 shadow-lg hover:shadow-xl'
              }`}
            >
              <Scan className="w-5 h-5" />
              {scanning ? 'Scanning for Threats...' : 'Scan for Malware'}
            </button>
          </div>
        </div>

        {/* Results Section */}
        {results && (
          <div className={`rounded-2xl shadow-xl p-6 transition-colors ${
            isDark ? 'bg-gray-800' : 'bg-white'
          }`}>
            <h2 className={`text-xl font-semibold mb-6 flex items-center gap-2 ${
              isDark ? 'text-white' : 'text-gray-800'
            }`}>
              <Shield className="w-5 h-5" />
              Scan Results
            </h2>

            {/* Threat Level Banner */}
            <div className={`rounded-xl p-4 mb-6 border transition-colors ${
              threat.label === 'MALICIOUS'
                ? isDark 
                  ? 'bg-red-900/30 border-red-800 text-red-300'
                  : 'text-red-600 bg-red-50 border-red-300'
                : threat.label === 'SUSPICIOUS'
                  ? isDark 
                    ? 'bg-yellow-900/30 border-yellow-800 text-yellow-300'
                    : 'text-yellow-600 bg-yellow-50 border-yellow-300'
                  : isDark 
                    ? 'bg-green-900/30 border-green-800 text-green-300'
                    : 'text-green-600 bg-green-50 border-green-300'
            }`}>
              <div className="flex items-center justify-center gap-3">
                <threat.icon className="w-8 h-8" />
                <div className="text-center">
                  <h3 className="text-2xl font-bold">{threat.label}</h3>
                  <p className="text-sm opacity-80">
                    File has been classified as {threat.label.toLowerCase()}
                  </p>
                </div>
              </div>
            </div>

            {/* Detailed Information */}
            <div className="grid md:grid-cols-2 gap-6">
              {/* File Features */}
              <div className={`rounded-xl p-4 transition-colors ${
                isDark ? 'bg-gray-700/50' : 'bg-gray-50'
              }`}>
                <h4 className={`font-semibold mb-3 ${
                  isDark ? 'text-white' : 'text-gray-800'
                }`}>File Analysis</h4>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className={isDark ? 'text-gray-400' : 'text-gray-600'}>
                      File Name:
                    </span>
                    <span className={`font-medium ${
                      isDark ? 'text-gray-200' : 'text-gray-900'
                    }`}>
                      {results.features?.file_name || 'N/A'}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={isDark ? 'text-gray-400' : 'text-gray-600'}>
                      File Size:
                    </span>
                    <span className={`font-medium ${
                      isDark ? 'text-gray-200' : 'text-gray-900'
                    }`}>
                      {results.features?.file_size ? formatFileSize(results.features.file_size) : 'N/A'}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={isDark ? 'text-gray-400' : 'text-gray-600'}>
                      File Type:
                    </span>
                    <span className={`font-medium ${
                      isDark ? 'text-gray-200' : 'text-gray-900'
                    }`}>
                      {results.features?.file_type || 'Unknown'}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={isDark ? 'text-gray-400' : 'text-gray-600'}>
                      Entropy:
                    </span>
                    <span className={`font-medium ${
                      isDark ? 'text-gray-200' : 'text-gray-900'
                    }`}>
                      {results.features?.entropy || 'N/A'}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={isDark ? 'text-gray-400' : 'text-gray-600'}>
                      Hash (MD5):
                    </span>
                    <span className={`font-mono text-xs break-all ${
                      isDark ? 'text-gray-300' : 'text-gray-700'
                    }`}>
                      {results.features?.hash || 'N/A'}
                    </span>
                  </div>
                </div>
              </div>

              {/* Detection Reasons */}
              <div className={`rounded-xl p-4 transition-colors ${
                isDark ? 'bg-gray-700/50' : 'bg-gray-50'
              }`}>
                <h4 className={`font-semibold mb-3 ${
                  isDark ? 'text-white' : 'text-gray-800'
                }`}>Detection Details</h4>
                {results.reasons && results.reasons.length > 0 ? (
                  <ul className="space-y-2">
                    {results.reasons.map((reason, index) => (
                      <li key={index} className="flex items-start gap-2 text-sm">
                        <AlertTriangle className={`w-4 h-4 mt-0.5 flex-shrink-0 ${
                          isDark ? 'text-yellow-400' : 'text-yellow-500'
                        }`} />
                        <span className={isDark ? 'text-gray-200' : 'text-gray-700'}>
                          {reason}
                        </span>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <p className={`text-sm ${
                    isDark ? 'text-gray-400' : 'text-gray-500'
                  }`}>
                    No specific threats detected
                  </p>
                )}
              </div>
            </div>

            {/* Security Recommendations */}
            <div className={`mt-6 rounded-xl p-4 border transition-colors ${
              isDark 
                ? 'bg-blue-900/30 border-blue-800/50'
                : 'bg-blue-50 border-blue-200'
            }`}>
              <h4 className={`font-semibold mb-2 ${
                isDark ? 'text-blue-300' : 'text-blue-800'
              }`}>Security Recommendations</h4>
              <ul className={`text-sm space-y-1 ${
                isDark ? 'text-blue-200' : 'text-blue-700'
              }`}>
                {results.verdict === 'malicious' && (
                  <>
                    <li>⚠️ DO NOT execute or open this file</li>
                    <li>🔒 Quarantine the file immediately</li>
                    <li>🛡️ Run a full system antivirus scan</li>
                  </>
                )}
                {results.verdict === 'suspicious' && (
                  <>
                    <li>⚠️ Exercise caution when handling this file</li>
                    <li>🔍 Consider additional analysis with other tools</li>
                    <li>🛡️ Scan in a sandboxed environment if needed</li>
                  </>
                )}
                {results.verdict === 'clean' && (
                  <li>✅ File appears safe based on current analysis</li>
                )}
              </ul>
            </div>
          </div>
        )}

        {/* Footer Info */}
        <div className={`text-center mt-6 text-sm ${
          isDark ? 'text-gray-400' : 'text-gray-500'
        }`}>
          <p>🔬 Powered by machine learning algorithms and signature-based detection</p>
          <p>Last updated: {new Date().toLocaleDateString()}</p>
        </div>
      </div>
    </div>
  );
};

export default MalwareScanner;